
=============== Tutorial 1 ===============================

References and Links:
https://github.com/brechtsanders/winlibs_mingw

To check the version of compilers:
gcc --version
g++ --version

To get help about gcc and g++ :
gcc --help
g++ --help


To build a cpp file:
g++ -g -std=c++20 main.cpp -o add


cl.exe is a cpp compiler from microsoft which can be found in windows powershell.
we can build exe files with cl.exe:
cl.exe /Zi /std:c++latest /EHsc /Fe: rooster.exe main.cpp

https://linuxize.com/post/how-to-install-gcc-on-ubuntu-20-04/
sudo apt install gcc-8 g++-8 gcc-9 g++-9 gcc-10 g++10


To debug cpp programs use gdb:
sudo apt-get install gdb
gdb --version
gdb --help


# cmake makes make file

Install cmake :
sudo apt-get install cmake

make --version
cmake --version

make --help
cmake --help


==================== Tutorial 2 ====================

project(HelloApp        -> executable name
        VERSION 0.0.1       -> version of executable
        DESCRIPTION "The leading Hello World App"
        LANGUAGE CXX)

add_executable(HelloAppBinary main.cpp) -> we can add mkultiple source files here

cmake selects the compiler on board on the system

cmake does its work in mainly two steps:
-- Configuring done     
-- Generating done


target_compile_features(HelloAppBinary PRIVATE cxx_std_20)      // PRIVATE is important, will learn about it in future Tutorial

-> making a seperate build folder is known as out of source build

we can build project like
cmake -S <source_dir> -B <build_dir>

when we run the command cmake it looks for CMakeLists.txt file in the specified source directory
when we run the command make it looks  for Makefile

First cross platfrom app is ready on window it will generate visual studio solution and on ubuntu it will generate object file.


==================== Tutorial 3 ====================

Generators:
    A way to tell CMake which build system it's going to generate a project for.

Windows :
    Visual Studio Project 
    Mingw Project
    Ninja Project

Linux :
    Unix Makefile Project
    Ninja

About Ninja:
https://ninja-build.org/


we can see the list of generators in cmake -h
With the help of different generators we can build a project for different IDE and platfrom as well

cmake -G "Ninja" -S source/ -B build/
cmake -G "Unix Makefiles" -S source/ -B build/

ninja --version
ninja --help

==================== Tutorial 4 ====================

We saw that cmake can generate projects for multiple IDE and platform.
then we need to call either make, ninja or msbuild according to project.
sometime it can be confusing, so we need a unified way to build.

cmake has a command to handle this.
Once the project build is completed using:
cmake -S <src_dir> -B <build_dir>
we can generate binary using:
cmake --build <build_dir>       
# above command is very useful, it can work even if we have ninja, mingw, make 
# or vscode file. it wraps all underlying.

Target is one written in CMakeLists.txt
# To know about the target obtions of specific project like ninja or make,
# and what we can perform with it.
cmake --build . --target help   # run inside build folder.

To clean => run inside build folder
cmake --build . --target clean

To build specific target.
cmake --build . --target <target_name>

To build all target:
cmake --build . --target all



